[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "loggem"
version = "0.1.0"
description = "AI-Assisted Log Anomaly Detector with Configurable LLM Providers (HuggingFace, OpenAI, Anthropic, Ollama)"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "LogGem Contributors"}
]
keywords = ["security", "logs", "anomaly-detection", "ai", "llm", "gemma", "openai", "anthropic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]

dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dateutil>=2.8.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "watchdog>=3.0.0",
    "aiofiles>=23.0.0",
    "structlog>=23.0.0",
    "cryptography>=41.0.0",
    "PyYAML>=6.0.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
# HuggingFace provider (local models - includes Gemma 3)
huggingface = [
    "transformers>=4.35.0",
    "torch>=2.0.0",
    "accelerate>=0.20.0",
    "bitsandbytes>=0.41.0",
]

# OpenAI provider (cloud API)
openai = [
    "openai>=1.0.0",
]

# Anthropic provider (cloud API)
anthropic = [
    "anthropic>=0.18.0",
]

# Ollama provider (local API)
ollama = [
    "requests>=2.31.0",
]

# All providers
all = [
    "transformers>=4.35.0",
    "torch>=2.0.0",
    "accelerate>=0.20.0",
    "bitsandbytes>=0.41.0",
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    "requests>=2.31.0",
]

# Development tools
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.scripts]
loggem = "loggem.cli:app"

[project.urls]
Homepage = "https://github.com/cbritt0n/loggem"
Documentation = "https://github.com/cbritt0n/loggem#readme"
Repository = "https://github.com/cbritt0n/loggem"
Issues = "https://github.com/cbritt0n/loggem/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
loggem = ["py.typed"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP", "B", "S", "C4", "DTZ", "T10", "ISC", "RET", "SIM", "ARG"]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "S101",  # Use of assert (OK in tests)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",  # Assert statements OK in tests
    "B017",  # pytest.raises(Exception) is intentional for testing any exception
    "ARG001",  # Unused function arguments OK in test fixtures
    "DTZ001",  # datetime without tz OK in tests
    "DTZ005",  # datetime.now() without tz OK in tests
    "DTZ007",  # datetime.strptime without tz OK in tests
    "E402",  # Module level imports not at top OK for some test setups
]
"src/loggem/parsers/*" = [
    "DTZ005",  # datetime.now() without tz - fallback for failed parsing
    "DTZ006",  # datetime.fromtimestamp without tz - preserving log timestamps
    "DTZ007",  # datetime.strptime without tz - parsing log timestamps as-is
    "E722",   # Bare except OK for fallback datetime parsing
    "ARG002", # Unused line_number parameter - part of parser interface
    "S110",   # try-except-pass/continue OK for parsing errors
    "S112",   # try-except-continue OK for parsing errors
    "S314",   # XML parsing - Windows Event logs require it
]
"src/loggem/cli.py" = [
    "B008",   # Function calls in defaults OK for Typer
    "B904",   # Exception chaining - re-raising with context
    "ARG001", # Unused CLI args OK - reserved for future use
]
"src/loggem/detector/llm_provider.py" = [
    "B904",   # Exception chaining - re-raising with context
    "ARG002", # Unused kwargs - part of provider interface
    "S113",   # Requests timeout - local Ollama server
]
"src/loggem/performance/__init__.py" = [
    "S324",   # MD5 - used for cache keys, not cryptographic
]
"src/loggem/streaming/__init__.py" = [
    "E722",   # Bare except - intentional for queue overflow handling
    "S110",   # try-except-pass - intentional for queue overflow
    "ARG002", # Unused timeout - interface consistency
]
"src/loggem/core/config.py" = [
    "S108",   # /tmp usage - configurable via settings
]
"tests/test_streaming.py" = [
    "SIM115", # Context manager - intentional for testing temp files
]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=loggem",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
